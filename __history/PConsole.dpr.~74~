program PConsole;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils,
  System.Generics.Collections,
  USisDos.Tela.Menu in 'USisDos.Tela.Menu.pas',
  USisDos.Tela.IMenu in 'USisDos.Tela.IMenu.pas',
  USisDos.Model.Produto in 'USisDos.Model.Produto.pas',
  USisDos.Tela.ICadastroProduto in 'USisDos.Tela.ICadastroProduto.pas',
  USisDos.Model.Estoque in 'USisDos.Model.Estoque.pas',
  USisDos.Tela.ICadastroEstoque in 'USisDos.Tela.ICadastroEstoque.pas',
  USisDos.Tela.CadastroEstoque in 'USisDos.Tela.CadastroEstoque.pas',
  USisDos.Tela.ICriarTelaProduto in 'USisDos.Tela.ICriarTelaProduto.pas',
  USisDos.Tela.CriarTelaProduto in 'USisDos.Tela.CriarTelaProduto.pas',
  USisDos.Tela.IFuncoesTelaProduto in 'USisDos.Tela.IFuncoesTelaProduto.pas';

var
  LOpcaoEscolhida    : string;
  LTelaProduto       : ICriarTelaProduto;
  LFuncaoTelaProduto : IFuncoesTelaProduto;

  LTelaEstoque      : ICadastroEstoque;

  LListaEstoque     : TList<TEstoque>;

  LRespostaCadastro : string;

  procedure CriarTelas;
  begin
    LTelaProduto       := TTelaCriarTelaProduto.New;
    LFuncaoTelaProduto := TTelaCriarTelaProduto.newFuncao;

    LTelaEstoque  := TCadastroEstoque.New;
  end;

  procedure CriarListaDados;
  begin
    LListaEstoque := TList<TEstoque>.Create();
  end;

  procedure Inicializar_OpcaoEscolhida;
  begin
    LOpcaoEscolhida := '0';
  end;

  procedure RespostaCadastroNegativa;
  begin
    LRespostaCadastro := 'N';
  end;

  procedure RespostaCadastroPositiva;
  begin
    LRespostaCadastro := 'S';
  end;

  function ValidarResposaCadastro(AValorResposta : string) : Boolean;
  begin
    result := AValorResposta.ToUpper() = LRespostaCadastro.ToUpper;
  end;

  function TelaCadastroProduto : string;
  begin
    LTelaProduto.CriarTelaCadastroProduto;
    Result := LTelaProduto.GetOpcaoEscolhida;
  end;


  function TelaCadastroEstoque : string;
  begin
    LTelaEstoque.MontarTelaCadastroEstoque;
    LTelaEstoque.SetListaProduto(LTelaProduto.GetListaProduto)
                .SetListaEstoque(LListaEstoque)
                .PesquisarProduto(TListProd)
                .GuardarEstoque.MensagemAtualizacaoEstoque.SetProdutoEncontradoNegativo;
    Result := LTelaEstoque.GetOpcaoEscolhida;
  end;

  procedure SelecionarOpcaoMenu;
  begin
    LOpcaoEscolhida := TMenuTelaDos.New
                                   .MontarMenu
                                   .EscolherOpcao
                                   .GetOpcaoEscolhida;
  end;

  procedure MensagemOpcao3;
  begin
    Writeln('Modulo ainda não desenvolvido');
  end;

  procedure MensagemOpcao4;
  begin
    Writeln('Saindo Fora... ');
  end;

  procedure BlocoOpcao1CadastroProduto;
  begin
    RespostaCadastroPositiva;
    while ValidarResposaCadastro('S') do
      LRespostaCadastro := TelaCadastroProduto;
    Inicializar_OpcaoEscolhida;
  end;

  procedure BlocoOpcao2CadastroEstoque;
  begin
    RespostaCadastroPositiva;
    while ValidarResposaCadastro('S') do
      LRespostaCadastro := TelaCadastroEstoque;
    Inicializar_OpcaoEscolhida;
  end;

  procedure BlocoOpcao3Venda;
  begin
    MensagemOpcao3;
    RespostaCadastroNegativa;
    Inicializar_OpcaoEscolhida;
  end;

  procedure BlocoOpcao4Sair;
  begin
    MensagemOpcao4;
    RespostaCadastroPositiva;
  end;

begin
  try
     CriarTelas;
     CriarListaDados;
     RespostaCadastroNegativa;
     Inicializar_OpcaoEscolhida;
     while ValidarResposaCadastro('N') do
     begin
       case LOpcaoEscolhida[1] of
        '0' : SelecionarOpcaoMenu;
        '1' : BlocoOpcao1CadastroProduto;
        '2' : BlocoOpcao2CadastroEstoque;
        '3' : BlocoOpcao3Venda;
        '4' : BlocoOpcao4Sair;
       end;
     end;
     ReadLn;
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.
