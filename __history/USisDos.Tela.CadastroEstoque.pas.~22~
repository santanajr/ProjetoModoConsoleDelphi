unit USisDos.Tela.CadastroEstoque;

interface

uses System.SysUtils,
     System.Generics.Collections,
     USisDos.Tela.ICadastroEstoque,
     USisDos.Model.Produto,
     USisDos.Model.Estoque;

type

  TCadastroEstoque = class(TInterfacedObject, ICadastroEstoque)
    FListaProduto : TList<TProduto>;
    FListaEstoque : TList<TEstoque>;
    FEstoque      : TEstoque;
    FProduto      : TProduto;

    FCodigoDigitado : string;
    FQtdDigitada    : Integer;
    FOpcaoEscolhida : string;

    constructor Create;

    function MontarTelaCadastroEstoque : ICadastroEstoque;
    function MensagemAtualizacaoEstoque : ICadastroEstoque;

    function SetListaProduto(AListProduto :TList<TProduto>): ICadastroEstoque;
    function SetListaEstoque(AListaEstoque: TList<TEstoque>) : ICadastroEstoque;
    function PesquisarProduto(ATipoLista : TListaPesquisa = TListProd) : ICadastroEstoque;
    function SetValorEstoque(AEstoque : Integer) : ICadastroEstoque;
    function GuardarEstoque : ICadastroEstoque;

    function GetOpcaoEscolhida : string;

    class function New : ICadastroEstoque;
  end;

implementation

{ TCadastroEstoque }

constructor TCadastroEstoque.Create;
begin
  FEstoque := TEstoque.Create;
end;

function TCadastroEstoque.SetListaEstoque(AListaEstoque: TList<TEstoque>): ICadastroEstoque;
begin
  FListaEstoque := AListaEstoque;
  Result := Self;
end;

function TCadastroEstoque.GetOpcaoEscolhida: string;
begin
  Result := FOpcaoEscolhida;
end;

function TCadastroEstoque.GuardarEstoque: ICadastroEstoque;
begin
  PesquisarProduto(TListEstoque);
  if FEstoque <> nil then
    SetValorEstoque(FQtdDigitada);
  FListaEstoque.Add(FEstoque);
  Result := Self;
end;

function TCadastroEstoque.MensagemAtualizacaoEstoque: ICadastroEstoque;
begin
  Writeln('O produto ' + FEstoque.FProduto.FCodigo +
          ' tem estoque atual de ' + FEstoque.Estoque.ToString() );
  Result := Self;
end;

function TCadastroEstoque.MontarTelaCadastroEstoque: ICadastroEstoque;
begin
  Writeln('Pesquise o codigo do produto');
  ReadLn(FCodigoDigitado);
  Writeln('Digite a quantidade em estoque');
  ReadLn(FQtdDigitada);
  Writeln('Deseja continuar ? (S/N)');
  ReadLn(FOpcaoEscolhida);

  Result := Self;
end;

class function TCadastroEstoque.New: ICadastroEstoque;
begin
  result := TCadastroEstoque.Create;
end;

function TCadastroEstoque.PesquisarProduto(ATipoLista : TListaPesquisa = TListProd): ICadastroEstoque;
var
  LProduto  : TProduto;
  LEstoque  : TEstoque;
begin
  Result := Self;

  case ATipoLista of
    TListProd : begin
                  for LProduto in FListaProduto do
                  begin
                    if LProduto.FCodigo = FCodigoDigitado then
                    begin
                      FEstoque.FProduto := LProduto;
                      break;
                    end;
                  end;
                end;

     TListEstoque : begin
                      for LEstoque in FListaEstoque do
                      begin
                        if LEstoque.FProduto.FCodigo = FCodigoDigitado then
                        begin
                          FEstoque.FProduto := LEstoque.FProduto;
                          break;
                        end;
                      end;
                    end;
  end;
end;

function TCadastroEstoque.SetListaProduto(AListProduto: TList<TProduto>): ICadastroEstoque;
begin
  FListaProduto := AListProduto;
  Result := Self;
end;

function TCadastroEstoque.SetValorEstoque(AEstoque : Integer): ICadastroEstoque;
begin
  FEstoque.Estoque := FEstoque.Estoque + AEstoque;
end;

end.
